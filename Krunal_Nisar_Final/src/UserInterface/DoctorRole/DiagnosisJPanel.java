/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package UserInterface.DoctorRole;

import Business.Doctor.Doctor;
import Business.Encounter.Encounter;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.LabOrganization;
import Business.Organization.NurseOrganization;
import Business.Organization.Organization;
import Business.Patient.Patient;
import Business.Report.Diagnosis;
import Business.UserAccount.UserAccount;
import Business.VitalSigns.VitalSign;
import Business.WorkQueue.LabWorkRequest;
import Business.WorkQueue.NurseWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author Krunal Nisar
 */
public class DiagnosisJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DiagnosisJPanel
     */
    JPanel userProcessContainer;
     UserAccount userAccount;
     Organization organization;
     Enterprise enterprise;
     Network network;
     Patient patient;
     Encounter encounter;   
     String lresult;
     String nresult;
     
        public DiagnosisJPanel(JPanel userProcessContainer, UserAccount userAccount,  Organization organization, Enterprise enterprise,Network network,Patient patient) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise=enterprise;
        this.userAccount = userAccount;
        this.network = network;
        this.patient = patient;
       // populatePatientComboBox();
        populateLabRequestTable();
        populateNurseRequestTable();
            System.out.println(patient);
    }

//    public void populatePatientComboBox()
//    {
//        //PatientComboBox.removeAllItems();
//        System.out.println(userAccount);
//        Doctor doctor = (Doctor) userAccount.getEmployee();
//        System.out.println(doctor);
//        for(Patient patient : doctor.getPatientDir().getPatientList())
//        {
//            System.out.println(patient);
//            //PatientComboBox.addItem(patient);
//            
//        }
//    }
    
    public void populateNurseRequestTable()
    {
        DefaultTableModel model = (DefaultTableModel) NurseTable.getModel();
        
        model.setRowCount(0);
        for(WorkRequest wr : userAccount.getWorkQueue().getWorkRequestList())
        {
            if(wr instanceof NurseWorkRequest)
            {
            Object row [] = new Object[6];
            row[0]= wr.getMessage();
             row[1]=wr.getPatient().getName();
            row[2]=wr.getEnocunter();
            row[3]=wr.getReceiver();
            row[4]=wr.getStatus();
            
             nresult = ((NurseWorkRequest)wr).getTestResult();
            row[5]=nresult==null ? "waiting" : nresult;
            model.addRow(row);
            }
        }
    }
    
    public void populateLabRequestTable()
    {
         DefaultTableModel model = (DefaultTableModel) LabTable.getModel();
        
        model.setRowCount(0);
        for(WorkRequest wr : userAccount.getWorkQueue().getWorkRequestList())
        {
             if(wr instanceof LabWorkRequest)
            {
            Object row [] = new Object[6];
            row[0]= wr.getMessage();
            row[1]=wr.getPatient().getName();
           row[2]=wr.getEnocunter();
            row[3]=wr.getReceiver();
            row[4]=wr.getStatus();
            
             lresult = ((LabWorkRequest)wr).getTestResult();
            row[5]=lresult==null ? "waiting" : lresult;
                   
            model.addRow(row);
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        SymptomsTF = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        RemarksTF = new javax.swing.JTextField();
        SaveJButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        LabButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        LabTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        NurseButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        NurseTable = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        ChartJPanel = new javax.swing.JPanel();

        SymptomsTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SymptomsTFActionPerformed(evt);
            }
        });

        jLabel4.setText("Enter Symptoms");

        jLabel5.setText("Diagnosis");

        RemarksTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemarksTFActionPerformed(evt);
            }
        });

        SaveJButton.setText("Save");
        SaveJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveJButtonActionPerformed(evt);
            }
        });

        jButton1.setText("<<Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(207, 207, 207)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SymptomsTF, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RemarksTF, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SaveJButton)))
                .addContainerGap(673, Short.MAX_VALUE))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {RemarksTF, SaveJButton, SymptomsTF, jButton1, jLabel4, jLabel5});

        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SymptomsTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RemarksTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(41, 41, 41)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SaveJButton)
                    .addComponent(jButton1))
                .addContainerGap(604, Short.MAX_VALUE))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {RemarksTF, SaveJButton, SymptomsTF, jButton1, jLabel4, jLabel5});

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane1.addTab("Diagnosis", jPanel1);

        LabButton.setText("Refer Labotorist for Tests");
        LabButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LabButtonActionPerformed(evt);
            }
        });

        LabTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Message", "Patient", "Reason", "Lab Assisstant", "Status", "Report"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(LabTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(134, 134, 134)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LabButton)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 760, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(259, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(LabButton)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(638, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Lab TestReport", jPanel2);

        NurseButton.setText("Refer Nusre for Vital Sign");
        NurseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NurseButtonActionPerformed(evt);
            }
        });

        NurseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Message", "Patient", "Reason", "Nurse", "Status", "Report"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(NurseTable);

        jButton2.setText("View Report");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        ChartJPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(357, 357, 357)
                        .addComponent(NurseButton))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 817, Short.MAX_VALUE)
                                .addComponent(ChartJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(247, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(NurseButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(ChartJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(175, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("VitalSignReport", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        JFreeChart chart = null;
        int i=0;
        int j=0;

        Doctor doctor = (Doctor) userAccount.getEmployee();
        //patient = (Patient) PatientComboBox.getSelectedItem();

        for(Encounter encounter : patient.getEncounterDir().getEncounterList())
        {
            if(encounter.getDoctor().equals(doctor))
            {
                VitalSign vs = encounter.getVitalSign();
                dataset.setValue(vs.getHeart(),"Rate"+i, "HeartRate"+j);
                dataset.setValue(vs.getBloodPressure(),"Rate"+i, "BloodPressure"+j);
                dataset.setValue(vs.getWeight(),"Rate"+i, "Weight"+j);
                dataset.setValue(vs.getRespiratory(),"Rate"+i, "Respiratory"+j);
                chart = ChartFactory.createBarChart("Patient History", "VitalSign", "Rate", dataset, PlotOrientation.VERTICAL, true, true, true);
                CategoryPlot p =chart.getCategoryPlot();
                p.setRangeGridlinePaint(Color.black);
                i++;
                j++;
            }
        }

        ChartPanel barPanel = new ChartPanel(chart);
        ChartJPanel.removeAll();
        ChartJPanel.add(barPanel , BorderLayout.CENTER);
        ChartJPanel.validate();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void NurseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NurseButtonActionPerformed
        // TODO add your handling code here:

        NurseWorkRequest nurseRequest = new NurseWorkRequest();
        nurseRequest.setMessage(RemarksTF.getText());
        nurseRequest.setSender(userAccount);
        nurseRequest.setPatient(patient);
        nurseRequest.setStatus("sent");
        nurseRequest.setEnocunter(encounter);

        for(Organization org : enterprise.getOrganizationDir().getOrganizationList())
        {
            if(org instanceof NurseOrganization)
            {
                org.getWorkQueue().getWorkRequestList().add(nurseRequest);
                userAccount.getWorkQueue().getWorkRequestList().add(nurseRequest);
                break;
            }
        }
        populateNurseRequestTable();
    }//GEN-LAST:event_NurseButtonActionPerformed

    private void LabButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LabButtonActionPerformed

        // TODO add your handling code here:
        LabWorkRequest labRequest = new LabWorkRequest();
        labRequest.setMessage(RemarksTF.getText());
        labRequest.setSender(userAccount);
        labRequest.setPatient(patient);
        labRequest.setStatus("sent");
        labRequest.setEnocunter(encounter);
        

        //        for(Organization org : enterprise.getOrganizationDir().getOrganizationList())
        //        {
            //            if(org instanceof LabOrganization)
            //            {
                //                org.getWorkQueue().getWorkRequestList().add(labRequest);
                //                userAccount.getWorkQueue().getWorkRequestList().add(labRequest);
                //                break;
                //            }
            //        }
        Organization org = null;
        System.out.println(enterprise);
        for (Organization o : enterprise.getOrganizationDir().getOrganizationList()){
            if (o instanceof LabOrganization){
                System.out.println(o);
                org = o;
                break;
            }
        }
        if (org!=null){
            org.getWorkQueue().getWorkRequestList().add(labRequest);
            userAccount.getWorkQueue().getWorkRequestList().add(labRequest);
        }

        //labRequest.setStatus("pending");
        populateLabRequestTable();
    }//GEN-LAST:event_LabButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void SaveJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveJButtonActionPerformed
        // TODO add your handling code here:
       // patient = (Patient) PatientComboBox.getSelectedItem();
       // Patient patientName =  (Patient) ReportTable.getValueAt(selectedRow, 1);
        String symptoms = SymptomsTF.getText();
        String remarks = RemarksTF.getText();
        
        
        
        encounter = patient.getEncounterDir().createEncounter();
        encounter.setSymptoms(symptoms);
        encounter.setEnterprise(enterprise);
        encounter.setStartDate(new Date());
        encounter.getDiagnosis().setName(remarks);
        encounter.setDoctor((Doctor) userAccount.getEmployee());
        JOptionPane.showMessageDialog(null, "Information saved successfully");
    }//GEN-LAST:event_SaveJButtonActionPerformed

    private void SymptomsTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SymptomsTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SymptomsTFActionPerformed

    private void RemarksTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemarksTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RemarksTFActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ChartJPanel;
    private javax.swing.JButton LabButton;
    private javax.swing.JTable LabTable;
    private javax.swing.JButton NurseButton;
    private javax.swing.JTable NurseTable;
    private javax.swing.JTextField RemarksTF;
    private javax.swing.JButton SaveJButton;
    private javax.swing.JTextField SymptomsTF;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
