/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package UserInterface.DoctorRole;

import Business.Doctor.Doctor;
import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Encounter.Encounter;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.Network.City;
import Business.Network.Network;
import Business.Network.State;
import Business.Organization.DoctorOrganization;
import Business.Organization.Organization;
import Business.Organization.PatientOrganization;
import Business.Patient.Patient;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.DoctorWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Krunal Nisar
 */
public class GlobalPatientSearchJPanel extends javax.swing.JPanel {

    /**
     * Creates new form GlobalPatientSearchJPanel
     */
      JPanel userProcessContainer;
    UserAccount userAccount;
    Organization organization;
    Enterprise enterprise;
    EcoSystem system;
    Network network;
    
    public GlobalPatientSearchJPanel(JPanel userProcessContainer, UserAccount userAccount,  Organization organization, Enterprise enterprise,EcoSystem system,Network network) {
        initComponents();
         this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise=enterprise;
        this.userAccount = userAccount;
        this.system=system;
        this.network = network;
        populateTable();
        
    }

 
    public void populateEncounter(Patient patient)
    {
        DefaultTableModel model = (DefaultTableModel) ReportTable.getModel();

        model.setRowCount(0);
        
                
            Object[] row = new Object[9];
           //Patient patient = (Patient) employee;
            
           
            
            for(Encounter encounter : patient.getEncounterDir().getEncounterList())
            {
            row[0] = encounter.getStartDate();
            row[1] = patient;
            row[2]= encounter;
            row[3]= encounter.getDiagnosis().getName();
            row[4]=encounter.getAssessmentHistory().getAssessmentList();
            row[5]=encounter.getTreatment();
            row[6]=encounter.getPrescription().getMedicationList();
            row[7]= encounter.getDoctor();
            row[8]= encounter.getEnterprise();
            model.addRow(row);
            
            }
         
    }
        
    

   

    public void populateTable()
    {
     
     DefaultTableModel model = (DefaultTableModel) searchTable.getModel();
        model.setRowCount(0);
        for (WorkRequest wr : userAccount.getWorkQueue().getWorkRequestList()) {
              if(wr instanceof DoctorWorkRequest)
              {
                Object[] row = new Object[5];
                row[0] = wr;
                row[1] = wr.getSender();
                row[2] = wr.getReceiver();
                row[3] = wr.getPatient();
                row[4] = wr.getStatus();

                model.addRow(row);
              }

        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        searchTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        searchString = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        Diagnosis1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        ReportTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        searchTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Patient SSN", "Sender", "Receiver", "Patient", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(searchTable);

        jButton1.setText("Search Request By SSN");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel6.setText("              Global Patient Search");

        jButton2.setText("<<Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton6.setText("Provide Medication");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        Diagnosis1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Diagnosis1.setText("Diagnosis");
        Diagnosis1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Diagnosis1ActionPerformed(evt);
            }
        });

        ReportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "date", "patient", "Symptoms", "Diagnosis", "Assessment", "Treatment", "Medication", "Doctor", "Hospital"
            }
        ));
        jScrollPane2.setViewportView(ReportTable);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Complete Patient History");

        jButton3.setText("View Details");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(266, 266, 266)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Diagnosis1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton6))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 713, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(searchString, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 868, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchString, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addGap(60, 60, 60)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Diagnosis1)
                    .addComponent(jButton6))
                .addGap(27, 27, 27)
                .addComponent(jButton2)
                .addContainerGap(282, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int search;
        try{
             search = Integer.parseInt(searchString.getText());
        }
        catch(NumberFormatException e)
        {
            JOptionPane.showMessageDialog(null, "Kindly Enter Integer Values");
            return;
        }
        UserAccount dUserAccount = null;
        Organization org =null;
        HospitalEnterprise hostenterprise =  null;
        Doctor doctor = null;
        Patient p;
        
        for(Network n : system.getNetworkList())
        {
        for(State state: n.getStateList())
        {
            for(City city : state.getCityList())
            {
                for(Enterprise e : city.getEnterpriseDir().getEnterpriseList())
                {
                    for(Organization o : e.getOrganizationDir().getOrganizationList())
                    {
                        if(o instanceof PatientOrganization)
                        {
                           org=o; 
                                for(Employee emp : org.getEmployeeDir().getEmployeeList())
                                {
                                    p = (Patient) emp;
                                    if(p.getSsn() == search)
                                    {
                                        hostenterprise = (HospitalEnterprise) e ;
                                        doctor = p.getDoctor();
                                        JOptionPane.showMessageDialog(null,"Patient Found");
                                        System.out.println(p.getName()+""+p.getDoctor());
                                        //fetchPatientDetails(p);
                                    }
                                }
                        }
                    }
                }
            }
        }
        }
        
        if(hostenterprise != null)
        {
            for(Organization o : hostenterprise.getOrganizationDir().getOrganizationList())
            {
             if(o instanceof DoctorOrganization)
             {
                 for(UserAccount ua: o.getUserAccountDir().getUserAccountList())
                 {
                     if(ua.getEmployee().equals(doctor))
                     {
                         dUserAccount = ua;
                         break;
                     }
                 }
             }
            }
        }
        
        DoctorWorkRequest request = new DoctorWorkRequest();
        request.setSender(userAccount);
        request.setReceiver(dUserAccount);
        request.setMessage(searchString.getText());
        request.setStatus("Searching...");
 
        if(dUserAccount != null)
        {
        userAccount.getWorkQueue().getWorkRequestList().add(request);
        dUserAccount.getWorkQueue().getWorkRequestList().add(request);
        
        populateTable();
        }
        else{
            JOptionPane.showMessageDialog(null,"This is new Patient");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        int selectedRow = ReportTable.getSelectedRow();

        if(selectedRow <0)
        {
            JOptionPane.showMessageDialog(null, "Select a Row");
            return;
        }

        Encounter encounter = (Encounter) ReportTable.getValueAt(selectedRow, 2);
        Patient patientName =  (Patient) ReportTable.getValueAt(selectedRow, 1);
        MedicationJPanel mjp = new MedicationJPanel(userProcessContainer,userAccount,organization,enterprise,network,encounter,patientName);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("MedicationJPanel", mjp);
        layout.next(userProcessContainer);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void Diagnosis1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Diagnosis1ActionPerformed
        // TODO add your handling code here:
        int selectedRow = searchTable.getSelectedRow();

        if(selectedRow <0)
        {
            JOptionPane.showMessageDialog(null, "Select a Row");
            return;
        }
        Patient patientName =  (Patient) searchTable.getValueAt(selectedRow, 3);
        DiagnosisJPanel dignosis = new DiagnosisJPanel(userProcessContainer,userAccount,organization,enterprise,network,patientName);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("DiagnosisJPanel", dignosis);
        layout.next(userProcessContainer);

    }//GEN-LAST:event_Diagnosis1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int selectedRow = searchTable.getSelectedRow();

        if(selectedRow <0)
        {
            JOptionPane.showMessageDialog(null, "Select a Row");
            return;
        }
        Patient patientName =  (Patient) searchTable.getValueAt(selectedRow, 3);
        populateEncounter(patientName);
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Diagnosis1;
    private javax.swing.JTable ReportTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField searchString;
    private javax.swing.JTable searchTable;
    // End of variables declaration//GEN-END:variables
}
