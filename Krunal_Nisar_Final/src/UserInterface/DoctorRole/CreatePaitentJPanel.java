/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package UserInterface.DoctorRole;

import Business.Doctor.Doctor;
import Business.Employee.Employee;
import Business.Encounter.Encounter;
import Business.Enterprise.Enterprise;
import Business.Network.City;
import Business.Network.Network;
import Business.Network.State;
import Business.Organization.DoctorOrganization;
import Business.Organization.Organization;
import Business.Organization.PatientOrganization;
import Business.Patient.Patient;
import Business.Role.PatientRole;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Krunal Nisar
 */
public class CreatePaitentJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CreatePaitentJPanel
     */
    JPanel userProcessContainer;
    UserAccount userAccount; 
    Organization organization;
    Enterprise enterprise;
    Network network;
    Patient patient;
    
    public CreatePaitentJPanel(JPanel userProcessContainer, UserAccount userAccount,  Organization organization, Enterprise enterprise,Network network) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.organization = organization;
        this.enterprise= enterprise;
        this.network=network;
        populateDoctor();
        populateTable();
        
    }

    public void fetchPatientDetails(Patient patient)
    {
        DefaultTableModel model = (DefaultTableModel) ReportTable.getModel();
        model.setRowCount(0);
            Object[] row = new Object[9];
            
            for(Encounter encounter : patient.getEncounterDir().getEncounterList())
            {
            row[0] = encounter.getStartDate();
            row[1] = patient.getName();
            row[2]= encounter.getSymptoms();
            row[3]= encounter.getDiagnosis().getName();
            row[4]=encounter.getAssessmentHistory().getAssessmentList();
            row[5]=encounter.getTreatment();
            row[6]=encounter.getPrescription().getMedicationList();
            row[7]= encounter.getDoctor();
            row[8]= encounter.getEnterprise();
            model.addRow(row);
            }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        DeleteJButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        PatientTable = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ReportTable = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        searchString = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        Diagnosis1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        PIdTF = new javax.swing.JTextField();
        PNameTF = new javax.swing.JTextField();
        PAgeTF = new javax.swing.JTextField();
        CreateJButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        DoctorComboBox = new javax.swing.JComboBox();
        AllergyTF = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        AddressTF = new javax.swing.JTextField();
        jpanel3 = new javax.swing.JPanel();
        Login = new javax.swing.JButton();
        UsernameTF = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        PasswordTF = new javax.swing.JPasswordField();

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        DeleteJButton.setText("Delete");
        DeleteJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteJButtonActionPerformed(evt);
            }
        });

        jButton1.setText("<<Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        PatientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Patient Name", "Patient Id", "SSN", "Doctor", "Allergy"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(PatientTable);

        jButton3.setText("View Detailed Report");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Refresh");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        ReportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "date", "patient", "Symptoms", "Diagnosis", "Assessment", "Treatment", "Medication", "Doctor", "Hospital"
            }
        ));
        jScrollPane1.setViewportView(ReportTable);

        jButton5.setText("Search Patient by SSN");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        searchString.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchStringActionPerformed(evt);
            }
        });

        jButton6.setText("Provide Medication");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        Diagnosis1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Diagnosis1.setText("Diagnosis");
        Diagnosis1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Diagnosis1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(184, 184, 184)
                                .addComponent(Diagnosis1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(jButton6))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jButton1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButton3)
                                    .addGap(13, 13, 13)
                                    .addComponent(DeleteJButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jButton4)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 981, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(593, 593, 593)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchString, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(1675, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {DeleteJButton, Diagnosis1, jButton1, jButton3, jButton4, jButton5, jButton6, searchString});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DeleteJButton)
                    .addComponent(jButton1)
                    .addComponent(jButton4)
                    .addComponent(jButton3))
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(searchString, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(Diagnosis1))
                .addContainerGap(286, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {DeleteJButton, Diagnosis1, jButton1, jButton3, jButton4, jButton5, jButton6, searchString});

        jTabbedPane1.addTab("Patient List", jPanel1);

        jLabel10.setText("Patient ID");

        jLabel11.setText("Patient Name");

        jLabel12.setText("SSN");

        jLabel13.setText("Doctor");

        jLabel14.setText("Allergy");

        PIdTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PIdTFActionPerformed(evt);
            }
        });

        PNameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PNameTFActionPerformed(evt);
            }
        });

        CreateJButton.setText("Create");
        CreateJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateJButtonActionPerformed(evt);
            }
        });

        jButton2.setText("<<Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        DoctorComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        DoctorComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DoctorComboBoxActionPerformed(evt);
            }
        });

        jLabel15.setText("Address");

        AddressTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddressTFActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(36, 36, 36)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(PNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(PIdTF, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(36, 36, 36)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(DoctorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AllergyTF, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(36, 36, 36)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(AddressTF, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(PAgeTF, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(223, 223, 223)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CreateJButton)))
                .addContainerGap(2263, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {AddressTF, AllergyTF, CreateJButton, DoctorComboBox, PAgeTF, PIdTF, PNameTF, jButton2, jLabel10, jLabel11, jLabel12, jLabel13, jLabel14, jLabel15});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(PIdTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PAgeTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(AddressTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DoctorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AllergyTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CreateJButton)
                    .addComponent(jButton2))
                .addContainerGap(390, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {AddressTF, AllergyTF, CreateJButton, DoctorComboBox, PAgeTF, PIdTF, PNameTF, jButton2, jLabel10, jLabel11, jLabel12, jLabel13, jLabel14, jLabel15});

        jTabbedPane1.addTab("Add Patient", jPanel2);

        Login.setText("Save");
        Login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginActionPerformed(evt);
            }
        });

        jLabel3.setText("UserName");

        jLabel4.setText("Password");

        javax.swing.GroupLayout jpanel3Layout = new javax.swing.GroupLayout(jpanel3);
        jpanel3.setLayout(jpanel3Layout);
        jpanel3Layout.setHorizontalGroup(
            jpanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanel3Layout.createSequentialGroup()
                .addGroup(jpanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpanel3Layout.createSequentialGroup()
                        .addGap(246, 246, 246)
                        .addGroup(jpanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(35, 35, 35)
                        .addGroup(jpanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(UsernameTF, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                            .addComponent(PasswordTF)))
                    .addGroup(jpanel3Layout.createSequentialGroup()
                        .addGap(301, 301, 301)
                        .addComponent(Login)))
                .addContainerGap(2213, Short.MAX_VALUE))
        );

        jpanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Login, PasswordTF, UsernameTF, jLabel3, jLabel4});

        jpanel3Layout.setVerticalGroup(
            jpanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanel3Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addGroup(jpanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UsernameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jpanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(PasswordTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(Login)
                .addContainerGap(543, Short.MAX_VALUE))
        );

        jpanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Login, PasswordTF, UsernameTF, jLabel3, jLabel4});

        jTabbedPane1.addTab("Login", jpanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void LoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginActionPerformed
        // TODO add your handling code here:
        PatientOrganization porg=null;
        for(Organization org : enterprise.getOrganizationDir().getOrganizationList())
        {   System.out.println("organization is "+org);

            if(org instanceof PatientOrganization)
            {
                porg = (PatientOrganization) org;
                String username = UsernameTF.getText();
                char[] passwordChar = PasswordTF.getPassword();
                String password = String.valueOf(passwordChar);
                UserAccount ua = porg.getUserAccountDir().createUserAccount(username, password, patient, new PatientRole());
                System.out.println(ua);
            }
        }
    }//GEN-LAST:event_LoginActionPerformed

    private void AddressTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddressTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AddressTFActionPerformed

    private void DoctorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DoctorComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DoctorComboBoxActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void CreateJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateJButtonActionPerformed
        // TODO add your handling code here:
        //Boolean status = true;
        //        if(PNameTF.getText().equals("") || PIdTF.getText().equals("") || PAgeTF.getText().equals("") || AllergyTF.getText().equals("") || AddressTF.getText().equals("")
            //                || UsernameTF.getText().equals("") || PasswordTF.getPassword().equals(""))
        //        {
            //            //status = false;
            //            JOptionPane.showMessageDialog(null, "Kindly Enter all required details");
            //            return;
            //        }

        //getting the values from text field

        //Validation for integer value
        //            try
        //            {
            PatientOrganization porg=null;
            int id=Integer.parseInt(PIdTF.getText());
            String name=PNameTF.getText();
            int ssn=Integer.parseInt(PAgeTF.getText());
            String address = AddressTF.getText();
            Doctor doctor = (Doctor) DoctorComboBox.getSelectedItem();
            String allergy = AllergyTF.getText();

            // System.out.println();
            System.out.println("enterpise is"+enterprise);
            for(Organization org : enterprise.getOrganizationDir().getOrganizationList())
            {   System.out.println("organization is "+org);

                if(org instanceof PatientOrganization)
                {
                    porg = (PatientOrganization) org;
                    System.out.println(porg);
                    System.out.println("Name is "+name);
                    patient = porg.getEmployeeDir().addPatient(id,name,address,allergy,doctor,ssn);

                    System.out.println(porg.getEmployeeDir().getEmployeeList().size());
                    System.out.println(patient);
                    //Patient patient = (Patient) employee;
                    doctor.getPatientDir().getPatientList().add(patient);

                    JOptionPane.showMessageDialog(null,"Patient "+patient+" Created");
                    break;
                }
            }

            //            }
        //            catch(NumberFormatException e)
        //            {
            //                //status=false;
            //                JOptionPane.showMessageDialog(null,"Kindly Enter Proper values for the fields");
            //            }

        //setting the values to patient object

        populateTable();
    }//GEN-LAST:event_CreateJButtonActionPerformed

    private void PNameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PNameTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PNameTFActionPerformed

    private void PIdTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PIdTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PIdTFActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        populateTable();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void DeleteJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = PatientTable.getSelectedRow();

        if(selectedRow > 0)
        {
            Patient  patient = (Patient) PatientTable.getValueAt(selectedRow, 0);

            int dialogButton=JOptionPane.YES_NO_CANCEL_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null,"Would you like to delete Patient", "Warning", dialogButton);

            if(dialogResult == JOptionPane.YES_OPTION)
            {
                Employee employee = patient;
                for(Organization org : enterprise.getOrganizationDir().getOrganizationList() )
                {
                    if(org instanceof PatientOrganization)
                    {
                        org.getEmployeeDir().removeEmployee(employee);
                    }
                }
            }
        }
            else
            {
                JOptionPane.showMessageDialog(null, "Kindly select the row");
            }
    }//GEN-LAST:event_DeleteJButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        
        DefaultTableModel model = (DefaultTableModel) ReportTable.getModel();
        int selectedRow = PatientTable.getSelectedRow();

        if(selectedRow < 0)
        {
            JOptionPane.showMessageDialog(null, "Kindy select a row");
            return;
        }
        Patient  p = (Patient) PatientTable.getValueAt(selectedRow, 0);
        model.setRowCount(0);
//        for(Organization org : enterprise.getOrganizationDir().getOrganizationList() )
//        {
//            if(org instanceof PatientOrganization)
//            {
//        for (Employee employee : org.getEmployeeDir().getEmployeeList()){
//            
//            {
//                
            Object[] row = new Object[9];
//            Patient patient = (Patient) employee;
//            
//            if(p.equals(patient))
//            {
            for(Encounter encounter : p.getEncounterDir().getEncounterList())
            {
            row[0] = encounter.getStartDate();
            row[1] = p;
            row[2]= encounter;
            row[3]= encounter.getDiagnosis().getName();
            row[4]=encounter.getAssessmentHistory().getAssessmentList();
            row[5]=encounter.getTreatment();
            row[6]=encounter.getPrescription().getMedicationList();
            row[7]= encounter.getDoctor();
            row[8]= encounter.getEnterprise();
            model.addRow(row);
            }
           // }
           // }
       // }
        //}
    
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        Organization org =null;
        Patient p;
        int search = Integer.parseInt(searchString.getText());
        for(State state: network.getStateList())
        {
            for(City city : state.getCityList())
            {
                for(Enterprise e : city.getEnterpriseDir().getEnterpriseList())
                {
                    for(Organization o : e.getOrganizationDir().getOrganizationList())
                    {
                        if(o instanceof PatientOrganization)
                        {
                           org=o; 
                                for(Employee emp : org.getEmployeeDir().getEmployeeList())
                                {
                                    p = (Patient) emp;
                                    if(p.getSsn() == search)
                                    {
                                        JOptionPane.showMessageDialog(null,"Patient Found");
                                        System.out.println(p.getName()+""+p.getDoctor());
                                        fetchPatientDetails(p);
                                    }
                                }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void searchStringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchStringActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchStringActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
         int selectedRow = ReportTable.getSelectedRow();
        
              if(selectedRow <0)
              {
                  JOptionPane.showMessageDialog(null, "Select a Row");
                  return;
              }
              
              Encounter encounter = (Encounter) ReportTable.getValueAt(selectedRow, 2);
              Patient patientName =  (Patient) ReportTable.getValueAt(selectedRow, 1);
                MedicationJPanel mjp = new MedicationJPanel(userProcessContainer,userAccount,organization,enterprise,network,encounter,patientName);
                CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                userProcessContainer.add("MedicationJPanel", mjp);
                layout.next(userProcessContainer);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void Diagnosis1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Diagnosis1ActionPerformed
        // TODO add your handling code here:
        int selectedRow = PatientTable.getSelectedRow();
        
              if(selectedRow <0)
              {
                  JOptionPane.showMessageDialog(null, "Select a Row");
                  return;
              }
        Patient patientName =  (Patient) PatientTable.getValueAt(selectedRow, 0);
        DiagnosisJPanel dignosis = new DiagnosisJPanel(userProcessContainer,userAccount,organization,enterprise,network,patientName);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("DiagnosisJPanel", dignosis);
        layout.next(userProcessContainer);
        
    }//GEN-LAST:event_Diagnosis1ActionPerformed
  
        private void populateTable(){
        DefaultTableModel model = (DefaultTableModel) PatientTable.getModel();
        
        model.setRowCount(0);
        for(Organization org : enterprise.getOrganizationDir().getOrganizationList() )
        {
            if(org instanceof PatientOrganization)
            {
        for (Employee employee : org.getEmployeeDir().getEmployeeList()){
            
            {
                
            Object[] row = new Object[5];
            Patient patient = (Patient) employee;
            row[0] = patient;
            row[1] = patient.getId();
            row[2]= patient.getSsn();
            row[3]=patient.getDoctor();
            row[4]=patient.getAllergy();
            model.addRow(row);
            }
        }
        }
    }
            }    
    public void populateDoctor()
    {
        System.out.println("ERROR"+organization);
        DoctorComboBox.removeAllItems();
        for(Employee emp : organization.getEmployeeDir().getEmployeeList())
        {
            DoctorComboBox.addItem(emp);
            
            
        }
//        for(Organization o : enterprise.getOrganizationDir().getOrganizationList())
//        {         
//            System.out.println("error"+o);
//            if(o instanceof DoctorOrganization)
//            {
//                org = o;
//                System.out.println("inside"+org);
//                for(Employee emp : org.getEmployeeDir().getEmployeeList())
//                {
//                    Doctor doctor = (Doctor) emp;
//                    DoctorComboBox.addItem(emp);
//                }
//            }
//        }
        
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AddressTF;
    private javax.swing.JTextField AllergyTF;
    private javax.swing.JButton CreateJButton;
    private javax.swing.JButton DeleteJButton;
    private javax.swing.JButton Diagnosis1;
    private javax.swing.JComboBox DoctorComboBox;
    private javax.swing.JButton Login;
    private javax.swing.JTextField PAgeTF;
    private javax.swing.JTextField PIdTF;
    private javax.swing.JTextField PNameTF;
    private javax.swing.JPasswordField PasswordTF;
    private javax.swing.JTable PatientTable;
    private javax.swing.JTable ReportTable;
    private javax.swing.JTextField UsernameTF;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel jpanel3;
    private javax.swing.JTextField searchString;
    // End of variables declaration//GEN-END:variables
}
