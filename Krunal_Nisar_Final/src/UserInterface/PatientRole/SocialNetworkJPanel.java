/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package UserInterface.PatientRole;

import Business.EcoSystem;
import Business.Encounter.Encounter;
import Business.Enterprise.Enterprise;
import Business.Medication.Medication;
import Business.Medicine.Medicine;
import Business.Network.City;
import Business.Network.Network;
import Business.Network.State;
import Business.Organization.Organization;
import Business.Organization.PatientOrganization;
import Business.Patient.Patient;
import Business.UserAccount.UserAccount;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author Krunal Nisar
 */
public class SocialNetworkJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SocialNetworkJPanel
     */
     JPanel userProcessContainer;
    UserAccount userAccount; 
    PatientOrganization organization;
    Enterprise enterprise;
    Network network;
    EcoSystem system;
   String[] names=new String[10];
        int[] namecount=new int[10];
    
    
    public SocialNetworkJPanel(JPanel userProcessContainer, UserAccount userAccount, Organization organization, Enterprise enterprise,Network network,EcoSystem system) {
        initComponents();
         this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.organization = (PatientOrganization) organization;
        this.enterprise= enterprise;
        this.network=network;
        this.system=system;
        
    }
    
    public void populateGraph(ArrayList<Medicine> medicineList)
    {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        JFreeChart chart = null;
        int i=0;
        int j=0;

       

        for(Medicine medicine : medicineList)
        {
          //  if(encounter.getDoctor().equals(doctor))
            {
                
                dataset.setValue(medicine.getMedcount(),medicine.getCategory(),medicine.getName());
              /// dataset.setValue(medicine.getCount(),medicine.getCategory(),medicine.getName());
                
                chart = ChartFactory.createBarChart("List of All Medicines ", "Medicine", "Count", dataset, PlotOrientation.VERTICAL, true, true, true);
                CategoryPlot p =chart.getCategoryPlot();
                p.setRangeGridlinePaint(Color.black);
               
            }
        }

        ChartPanel barPanel = new ChartPanel(chart);
        MedicinePanel.removeAll();
        MedicinePanel.add(barPanel , BorderLayout.CENTER);
        MedicinePanel.validate();
    }
    
    public void populateGraph1(String[] names ,int[] namecount )
    {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        JFreeChart chart = null;
        int i=0;
        int j=0;

       

//        for(Medicine medicine : medicineList)
//        {
//          //  if(encounter.getDoctor().equals(doctor))
//            {
                
                dataset.setValue(namecount[i],names[i],names[i]);
              /// dataset.setValue(medicine.getCount(),medicine.getCategory(),medicine.getName());
                
                chart = ChartFactory.createBarChart("List of All Medicines ", "Medicine", "Count", dataset, PlotOrientation.VERTICAL, true, true, true);
                CategoryPlot p =chart.getCategoryPlot();
                p.setRangeGridlinePaint(Color.black);
//               
//            }
//        }

        ChartPanel barPanel = new ChartPanel(chart);
        MedicinePanel.removeAll();
        MedicinePanel.add(barPanel , BorderLayout.CENTER);
        MedicinePanel.validate();
    }
     public int checkName(String name){
         boolean flag=false;
         int y=0;
         
         for(int x=0;x<names.length;x++){
             if(name==names[x]){
                 y=x;
             return y;
             }
                 
             
            
         }   
           return -1 ;
            
        }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DiseaseTF = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientTable = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        ChartJPanel = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        MedicinePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        backJButton = new javax.swing.JButton();

        jButton1.setText("Search Patients by Disease");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        patientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Patient"
            }
        ));
        jScrollPane1.setViewportView(patientTable);

        jButton2.setText("View Progress Report");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        ChartJPanel.setLayout(new java.awt.BorderLayout());

        jButton3.setText("Medicine List");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        MedicinePanel.setLayout(new java.awt.BorderLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel1.setText("              Patients Blogs");

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(209, 209, 209)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 544, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(DiseaseTF, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(27, 27, 27))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(57, 57, 57)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addComponent(jButton3))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(ChartJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(59, 59, 59)
                                .addComponent(MedicinePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {DiseaseTF, jButton1, jButton2, jButton3});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(DiseaseTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton2))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ChartJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(41, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(MedicinePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(62, 62, 62))))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {DiseaseTF, jButton1, jButton2, jButton3});

    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
         DefaultTableModel model = (DefaultTableModel) patientTable.getModel();
       // Object row[] = new Object[1];
        int i=0;
         model.setRowCount(0);
        String disease = DiseaseTF.getText();
        System.out.println(disease);
        for(Network network : system.getNetworkList())
        {
            for(State state : network.getStateList())
        {
            for(City city : state.getCityList())
            {
                for(Enterprise e : city.getEnterpriseDir().getEnterpriseList())
                {
                    for(Organization o : e.getOrganizationDir().getOrganizationList())
                    {
                        if(o instanceof PatientOrganization)
                        {
                           for(UserAccount ua : o.getUserAccountDir().getUserAccountList())
                           {
                               Patient patient = (Patient) ua.getEmployee();
                               System.out.println(patient.getName());
                               for(Encounter encounter : patient.getEncounterDir().getEncounterList())
                               {
                                   if(disease.contains((CharSequence) encounter.getDiagnosis().toString()))
                                   {
                                       
                                           
                                      Object row[] = new Object[1];
                                       row[0]=patient;
                                       System.out.println("check");
                                       model.addRow(row);
                                      // i++;
                                       
//                                       System.out.println("check");
//                                       System.out.println("encounter.getDiagnosis().toString()");
                                   }
                               }
                           }
                            
                            
                        }
                    }
                }
            }
        }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) patientTable.getModel();
        JFreeChart chart = null;
        DefaultPieDataset pieSet = new DefaultPieDataset();
        int count = patientTable.getRowCount();
//        patientTable.getSelectedRows();
//        Object row[] = new Object[count];
                for(int i=0;i<count;i++)
                {
                    
                    Patient pat = (Patient) patientTable.getValueAt(i,0);
                     pieSet.setValue(pat.getName()+":"+pat.getProgress(), pat.getProgress());
                     
                
          
         chart = ChartFactory.createPieChart("Patient Progress", pieSet, true, true, true);
        PiePlot p = (PiePlot) chart.getPlot();
                }
//       ChartFrame frame = new ChartFrame("Pie Chart" , chart);
//        frame.setVisible(true);
//        frame.setSize(450, 500);
                ChartPanel barPanel = new ChartPanel(chart);
        ChartJPanel.removeAll();
        ChartJPanel.add(barPanel , BorderLayout.CENTER);
        ChartJPanel.validate();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:DefaultTableModel model = (DefaultTableModel) patientTable.getModel();
       // Object row[] = new Object[1];
        int count = 0;
        DefaultTableModel model = (DefaultTableModel) patientTable.getModel();
        ArrayList<Medicine> medicineList = new ArrayList<>();
        int i=0;
         model.setRowCount(0);
        String disease = DiseaseTF.getText();
        System.out.println(disease);
        for(Network network : system.getNetworkList())
        {
            for(State state : network.getStateList())
        {
            for(City city : state.getCityList())
            {
                for(Enterprise e : city.getEnterpriseDir().getEnterpriseList())
                {
                    for(Organization o : e.getOrganizationDir().getOrganizationList())
                    {
                        if(o instanceof PatientOrganization)
                        {
                           for(UserAccount ua : o.getUserAccountDir().getUserAccountList())
                           {
                               Patient patient = (Patient) ua.getEmployee();
                               System.out.println(patient.getName());
                               for(Encounter encounter : patient.getEncounterDir().getEncounterList())
                               {
                                   if(disease.contains((CharSequence) encounter.getDiagnosis().toString()))
                                   {
                                       int counter =1;
                                       int size = encounter.getPrescription().getMedicationList().size() -1;
                                       for(Medication med : encounter.getPrescription().getMedicationList())
                                       {
                                           if(counter <= size)
                                           {
                                        Medicine medicine = med.getMedicine();
                                        medicineList.add(medicine);
//                                        if(medicineList.isEmpty())
//                                        {
//                                            medicineList.add(medicine);
//                                        }
//                                        else
//                                        {
//                                           for(Medicine m :medicineList)
//                                        {
//                                            if(m.equals(medicine))
//                                            {
//                                             
//                                                medicine.setMedcount(medicine.getCount()+1);
//                                            }
//                                            else
//                                            {
//                                                medicineList.add(medicine);
//                                            }
//                                        } 
//                                       // }
                                        ++counter;
                                       }
                                           
                                      
                                      // i++;
                                       
                                       }
//                                       System.out.println("check");
//                                       System.out.println("encounter.getDiagnosis().toString()");
                                       
                                   }
                               }
                           }
                            
                            
                        }
                    }
                }
            }
        }
        }
        populateGraph(medicineList);
        System.out.println(medicineList);
        
       
        
        
        for(Medicine m:medicineList){
            for(int j=0; i<medicineList.size();i++){
            int checkFlag=checkName(m.getName());
            if(checkFlag<0){
            names[j]=m.getName();
            namecount[j]+=1;
            m.setMedcount(m.getMedcount()+1);
                System.out.println(m.getMedcount());
            }
            else{
               namecount[checkFlag]+=1; 
            }
        }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ChartJPanel;
    private javax.swing.JTextField DiseaseTF;
    private javax.swing.JPanel MedicinePanel;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable patientTable;
    // End of variables declaration//GEN-END:variables
}
